swagger: '2.0'
info:
  title: Prototype API
  version: '1.0'
  description: Prototype API for classifying text messages
basePath: /
tags:
  - name: Classification
    description: Endpoints for classifying text messages
schemes:
  - http
  - https

paths:
  /:
    get:
      tags:
        - Classification
      summary: Root endpoint
      description: Use this endpoint to check if the API is up and running
      responses:
        200:
          description: Returns a simple greeting message

  /classify-1:
    post:
      tags:
        - Classification
      summary: TensorFlow-based classification endpoint
      description: Use this endpoint to classify text messages using a TensorFlow model
      parameters:
        - name: message
          in: body
          required: true
          description: Text message to be classified
          schema:
            type: object
            properties:
              message:
                type: string
                example: sopii minulle
      responses:
        200:
          description: Returns the classification results for the input text message
          schema:
            type: object
            properties:
              verdict:
                type: string
                description: The classification result
                example: success
              class:
                type: string
                description: The predicted class
                example: accept
              classification_probability:
                type: string
                description: The probability of the predicted class
                example: '0.78'
              probabilities:
                type: string
                description: A list of probabilities for all possible classes
                example: '0.78, 0.1, 0.12'

  /classify-2:
    post:
      tags:
        - Classification
      summary: Combined classification endpoint
      description: Use this endpoint to classify text messages using a combination of TensorFlow and OpenAI models.
                   The openai model is used only if tensorflow is under 60% sure.
      parameters:
        - name: message
          in: body
          required: true
          description: Text message to be classified
          schema:
            type: object
            properties:
              message:
                type: string
                example: sopii minulle
      responses:
        200:
          description: Returns the classification results for the input text message
          schema:
            type: object
            properties:
              verdict:
                type: string
                description: The classification result (TensorFlow)
                example: success
              class:
                type: string
                description: The predicted class (OpenAI)
                example: accept
              classification_probability:
                type: string
                description: The probability of the predicted class (TensorFlow)
                example: '0.78'
              probabilities:
                type: string
                description: A list of probabilities for all possible classes (TensorFlow)
                example: '0.78, 0.1, 0.12'

  /classify-3:
    post:
      tags:
        - Classification
      summary: OpenAI-based classification endpoint
      description: Use this endpoint to classify text messages using an OpenAI model
      parameters:
        - name: message
          in: body
          required: true
          description: Text message to be classified
          schema:
            type: object
            properties:
              message:
                type: string
                example: Hello, how are you doing?
      responses:
        200:
          description: Returns the classification results for the input text message
          schema:
           
